name: CI

on:
  pull_request:
  workflow_dispatch:

  # to execute once a day (more info see https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule )
  schedule:
    - cron: '0 0 * * *'

  push:
    tags:
      - 'v*'
    branches:
      - '**'

jobs:
  buildAndTest:

    strategy:
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        - macOS-latest
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json
    - name: Restore tools
      run: dotnet tool restore
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      shell: pwsh
      run: ./build.ps1 DotnetBuild
    - name: Run tests
      shell: pwsh
      run: ./build.ps1 DotnetTest
    - name: Run FSharpLint on itself
      shell: pwsh
      run: ./build.ps1 SelfCheck


  deployReleaseBinaries:
    needs: buildAndTest
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json
    - name: Restore tools
      run: dotnet tool restore
    - name: Build
      shell: pwsh
      run: ./build.ps1
    - name: Pack
      shell: pwsh
      run: ./build.ps1 DotnetPack
    - name: Publish binaries as artifact
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: ./dist/*.nupkg
    - name: Get Changelog Entry
      id: changelog_reader
      uses: mindsers/changelog-reader-action@v1
      with:
        version: ${{ github.ref }}
        path: ./CHANGELOG.md
    - name: Publish (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      shell: pwsh
      env:
        NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        FAKE_DETAILED_ERRORS: true

      run: ./build.ps1 Publish

    - name: PublishToGitHub (if master branch)
      if: github.ref == 'refs/heads/master'
      shell: pwsh
      env:
        NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        FAKE_DETAILED_ERRORS: true
      run: ./build.ps1 PublishToGitHub


  deployReleaseDocs:
    needs: deployReleaseBinaries
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Restore tools
      run: dotnet tool restore
    - name: Restore dependencies
      run: dotnet restore
    - name: Run Fornax
      shell: pwsh
      run: ./build.ps1 BuildDocs
    - name: Deploy (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: peaceiris/actions-gh-pages@v3
      with:
        personal_token: ${{ secrets.GITHUB_TOKEN  }}
        publish_dir: ./docs/_public
        publish_branch: gh-pages
        force_orphan: true

  testReleaseBinariesInDotNet8Container:
    needs: deployReleaseBinaries
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:8.0
    steps:
      - uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: ./artifacts
      - name: Remove global.json to allow .NET 8 SDK
        run: rm -f global.json
      - name: Create local NuGet.config
        run: |
          cat > NuGet.config <<EOF
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <packageSources>
              <add key="local" value="./artifacts" />
            </packageSources>
            <disabledPackageSources>
              <add key="nuget.org" value="true" />
            </disabledPackageSources>
          </configuration>
          EOF
      - name: Install FSharpLint from downloaded binaries
        run: dotnet tool install --global dotnet-fsharplint --prerelease --framework net8.0
      - name: Add .NET tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
      - name: Lint FSharpLint.Console project (net8.0 only)
        run: dotnet fsharplint lint ./src/FSharpLint.Console/FSharpLint.Console.fsproj --framework net8.0