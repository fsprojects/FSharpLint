name: Build, Test and SelfCheck

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]
        os: [ubuntu-latest, windows-latest, macOS-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Setup necessary dotnet SDKs
      uses: actions/setup-dotnet@v3
      with:
        global-json-file: global.json

    - name: Build via Bash
      if: runner.os != 'Windows'
      run: |
        chmod +x ./build.sh
        ./build.sh
      env:
        CI: true
        CONFIGURATION: ${{ matrix.configuration }}
        ENABLE_COVERAGE: true
    - name: Build via Windows
      if: runner.os == 'Windows'
      run: ./build.cmd
      env:
        CI: true
        CONFIGURATION: ${{ matrix.configuration }}
        ENABLE_COVERAGE: true
    - name: Publish binaries as artifact
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: ./dist/*.nupkg

  # Run SelfCheck once on Linux to check for lint warnings
  selfcheck:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Setup necessary dotnet SDKs
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Run SelfCheck
      run: |
        chmod +x ./build.sh
        ./build.sh SelfCheck
      env:
        CI: true

  # Builds the project in a dev container
  build-devcontainer:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v3

    - name: Build and run dev container task
      uses: devcontainers/ci@v0.3
      with:
        runCmd: |
          chmod +x ./build.sh
          ./build.sh

  testReleaseBinariesInDotNet8Container:
    needs: deployReleaseBinaries
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:8.0
    steps:
      - uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: ./artifacts
      - name: Remove global.json to allow .NET 8 SDK
        run: rm -f global.json
      - name: Create local NuGet.config
        run: |
          cat > NuGet.config <<EOF
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <packageSources>
              <add key="local" value="./artifacts" />
            </packageSources>
            <disabledPackageSources>
              <add key="nuget.org" value="true" />
            </disabledPackageSources>
          </configuration>
          EOF
      - name: Install FSharpLint from downloaded binaries
        run: dotnet tool install --global dotnet-fsharplint --prerelease --framework net8.0
      - name: Add .NET tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
      - name: Lint FSharpLint.Console project (net8.0 only)
        run: dotnet fsharplint lint ./src/FSharpLint.Console/FSharpLint.Console.fsproj --framework net8.0
